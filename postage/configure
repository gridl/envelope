#!/bin/bash

function libressl_warn {
	echo
	if test $(uname -s) = "Darwin"; then
		echo "\x1b[95m"
	else
		echo -e "\x1b[95m"
	fi
	echo "   ******************************************************************************"
	echo "                                   PLEASE READ:"
	echo "   It looks like we will have to compile LibreSSL when you do \`make\`."
	echo "   If you would like to install it yourself, please do so, then re-run configure."
	echo "   LibreSSL takes 10-20 minutes to compile, depending on your computer."
	echo
	echo "   ******************************************************************************"
	if test $(uname -s) = "Darwin"; then
		echo "\x1b[0m"
	else
		echo -e "\x1b[0m"
	fi
}

printf "checking for pg_config..."
pg_config > /dev/null
if test $? = 0; then
	echo "yes"
else
	echo "no"
	echo
	echo "ERROR:"
	echo "No pg_config found, if you haven't installed postgresql, then you must install it to compile postage"
	echo "If you have installed postgresql, then you must put pg_config in your PATH"
	exit
fi

#### OS CHECK
## COMPILATION IS A LITTLE DIFFERENT FOR THE OS'S
libressl="install"
libev="no"
libtre="notused" #NOT FOR POSTAGE
MAKE="make"
MANDIR="share\/man"
printf "checking for platform..."
if test $(uname -s) = "Linux"; then
	LDFLAGS="-lpq -lm -lrt"
	CPPFLAGS="-D_GNU_SOURCE"
	echo "Linux"

	# On linux it is easy to check for libressl
	printf "checking for LibreSSL..."
	if test $(ldconfig -p | grep "libtls.so " | wc -l) = "1"; then
		libressl="yes"
	fi
	echo $libressl
elif test $(uname -s) = "Darwin"; then
	LDFLAGS="-L\/usr\/local\/lib -lpq -lm -L\/usr\/local\/opt\/gettext\/lib"
	CPPFLAGS="-I\/usr\/local\/opt\/gettext\/include"
	echo "Darwin"
elif test $(uname -s) = "FreeBSD"; then
	LDFLAGS="-lpq -lm -lintl"
	MAKE=gmake
	MANDIR="man"
	echo "FreeBSD"
elif test $(uname -s) = "OpenBSD"; then
	LDFLAGS="-lpq -lm -lintl"
	CPPFLAGS=""
	MAKE=gmake
	MANDIR="man"
	echo "OpenBSD"

	## On OpenBSD it is easy to check for libev
	#printf "checking for Libev..."
	#if test $(pkg_info | grep "libev-4.22" | wc -l) = "1"; then
	#	libev="yes"
	#	echo $libev
	#else
	#	libev="no"
	#	echo $libev
	#	echo
	#	echo "Run \`pkg_add libev-4.22\` and then run ./configure again."
	#	echo "Alternatively the makefile will ATTEMPT compile it from source,"
	#	echo "But we do not recommend it."
	#	echo
	#fi

	# and even easier to check for libressl
	printf "checking for LibreSSL..."
	libressl="yes"
	echo $libressl
else
	LDFLAGS="-lpq -lm"
	echo "Unknown"
fi

LDFLAGS="$LDFLAGS -L$(pg_config --libdir | sed -e 's/\//\\\//g')"
CPPFLAGS="$CPPFLAGS -I$(pg_config --includedir | sed -e 's/\//\\\//g')"

BUILD_DEPS=""

function check_header {
	CUR_HEADER=$1
	printf "checking for $CUR_HEADER""..."
	echo "#include <$CUR_HEADER>" > test.c
	cc -c -o test.o test.c > /dev/null 2> /dev/null
	if test $? = 0; then
		HAVE_HEADER=1
		echo "yes"
	else
		HAVE_HEADER=0
		echo "no"
	fi
	rm -f test.c test.o
}

function check_function {
	CUR_FUNCTION=$1
	printf "checking for $CUR_FUNCTION""..."
	echo "extern int $CUR_FUNCTION(int);" > test.c
	echo "int main(int argc) {" >> test.c
	echo "    return $CUR_FUNCTION(argc);" >> test.c
	echo "}" >> test.c
	cc -o test.o test.c $2 > /dev/null 2> /dev/null
	if test $? = 0; then
		HAVE_FUNCTION=1
		echo "yes"
	else
		HAVE_FUNCTION=0
		echo "no"
	fi
	rm -f test.c test.o
}

function check_library {
	CUR_LIBRARY=$1
	printf "checking for -l$CUR_LIBRARY""..."
	echo "int main(int argc) {" > test.c
	echo "    return 0;" >> test.c
	echo "}" >> test.c
	cc -o test.o test.c -l$CUR_LIBRARY > /dev/null 2> /dev/null
	if test $? = 0; then
		HAVE_LIBRARY=1
		echo "yes"
	else
		HAVE_LIBRARY=0
		echo "no"
	fi
	rm -f test.c test.o
}

#### CHECK LIBRESSL VERSION
## if we have libressl, we need to check for 2.3.2 or newer (the api changed slightly)
if test $libressl = "yes"; then
	printf "checking for LibreSSL version >= 2.3.2..."
	# check LibreSSL version
	has_good_libressl=$(openssl version | awk ' { split($2,a,"."); print (a[1] > 1) && (a[2] > 2) && (a[2] > 3 || a[3] > 1) } ')
	if test "x$has_good_libressl" = "x1"; then
		libressl="yes"
	else
		libressl="install"
	fi
	echo "$libressl"
fi

INSTALL_DEPS=""
## add compile flags for libressl
if test $libressl = "yes"; then
	WHICH_SSL=$(which openssl)
	SSL_LIBDIR1="${WHICH_SSL%bin/openssl}lib"
	SSL_LIBDIR=$(echo $SSL_LIBDIR1 | sed -e 's/\//\\\//g')
	LDFLAGS="$LDFLAGS  $SSL_LIBDIR\\/libtls.a $SSL_LIBDIR\\/libssl.a $SSL_LIBDIR\\/libcrypto.a"
elif test $libressl = "install"; then
	LDFLAGS="$LDFLAGS ..\\/dependencies\\/libressl\\/tls\\/.libs\\/libtls.a ..\\/dependencies\\/libressl\\/ssl\\/.libs\\/libssl.a ..\\/dependencies\\/libressl\\/crypto\\/.libs\\/libcrypto.a"
	BUILD_DEPS="$BUILD_DEPS libressl"
	INSTALL_DEPS="$INSTALL_DEPS libressl-install"
	printf "resetting modify times for libressl..."
	DATE=$(date)
	find ../dependencies/libressl/ -name "*.in" | xargs touch -d "$DATE" && find ../dependencies/libressl/ -name "*.m4" | xargs touch -d "$DATE" && touch -d "$DATE" ../dependencies/libressl/configure
	echo "done"
else
	LDFLAGS="$LDFLAGS ..\\/dependencies\\/libressl\\/tls\\/.libs\\/libtls.a ..\\/dependencies\\/libressl\\/ssl\\/.libs\\/libssl.a ..\\/dependencies\\/libressl\\/crypto\\/.libs\\/libcrypto.a"
	BUILD_DEPS="$BUILD_DEPS libressl"
	printf "resetting modify times for libressl..."
	DATE=$(date)
	find ../dependencies/libressl/ -name "*.in" | xargs touch -d "$DATE" && find ../dependencies/libressl/ -name "*.m4" | xargs touch -d "$DATE" && touch -d "$DATE" ../dependencies/libressl/configure
	echo "done"
fi

#### CHECK FOR LIBEV
## if we are on openbsd, we can use package libev if it is 4.22
if test $libev = "yes"; then
	CPPFLAGS="$CPPFLAGS -I\\/usr\\/local\\/include"
	LDFLAGS="$LDFLAGS -lev"
else
	USE_LRT="no"
	libev_CPPFLAGS=""
	LDFLAGS="$LDFLAGS ev.o"
	BUILD_DEPS="$BUILD_DEPS ev.o"
	CHECK_HEADERS="sys/inotify.h sys/epoll.h sys/event.h port.h poll.h sys/select.h sys/eventfd.h sys/signalfd.h"
	for HEADER in $CHECK_HEADERS; do
		check_header "$HEADER"
		HEADER_VAR_NAME="HAVE_"$(echo "$HEADER" | tr '[a-z]' '[A-Z]' | tr '.' '_' | tr '/' '_')
		libev_CPPFLAGS="$libev_CPPFLAGS -D$HEADER_VAR_NAME""=$HAVE_HEADER"
	done
	CHECK_FUNCTIONS="inotify_init epoll_ctl kqueue port_create poll select eventfd signalfd"
	for FUNCTION in $CHECK_FUNCTIONS; do
		check_function "$FUNCTION"
		CUR_FUNCTION_VAR_NAME="HAVE_"$(echo "$FUNCTION" | tr '[a-z]' '[A-Z]')
		libev_CPPFLAGS="$libev_CPPFLAGS -D$CUR_FUNCTION_VAR_NAME""=$HAVE_FUNCTION"
	done
	check_function "clock_gettime"
	HAVE_SYSCALL_FUNCTION=0
	if test $HAVE_FUNCTION = 1; then
		if test $(uname -s) = "Linux"; then
			printf "checking for clock_gettime syscall..."
			echo "#include <unistd.h>" > test.c
			echo "#include <sys/syscall.h>" >> test.c
			echo "#include <time.h>" >> test.c
			echo "int main(int argc) {" >> test.c
			echo "    struct timespec ts;" >> test.c
			echo "    int status = syscall(SYS_clock_gettime, CLOCK_REALTIME, &ts);" >> test.c
			echo "    return status == -1;" >> test.c
			echo "}" >> test.c
			cc -o test.o test.c > /dev/null 2> /dev/null
			if test $? = 0; then
				./test.o
				if test $? = 0; then
					libev_CPPFLAGS="$libev_CPPFLAGS -DHAVE_CLOCK_GETTIME_SYSCALL""=1"
					echo "yes"
				else
					echo "no"
				fi
			else
				echo "no"
			    if test -z "$LIBEV_M4_AVOID_LIBRT"; then
					check_library "rt"
					if test $HAVE_LIBRARY = 1; then
						LDFLAGS="$LDFLAGS -lrt"
						check_function "clock_gettime"
						USE_LRT="yes"
					fi
				fi
			fi
			rm -f test.c test.o
		fi
	fi
	libev_CPPFLAGS="$libev_CPPFLAGS -DHAVE_CLOCK_GETTIME""=$HAVE_FUNCTION"
	check_function "nanosleep"
	if test -z "$LIBEV_M4_AVOID_LIBRT" && test $USE_LRT = "no"; then
		check_library "rt"
		if test $HAVE_LIBRARY = 1; then
			LDFLAGS="$LDFLAGS -lrt"
			check_function "nanosleep"
			libev_CPPFLAGS="$libev_CPPFLAGS -DHAVE_NANOSLEEP""=$HAVE_FUNCTION"
		fi
	fi
	if test -z "$LIBEV_M4_AVOID_LIBM"; then
		check_library "m"
		if test $HAVE_LIBRARY = 1; then
			LDFLAGS="$LDFLAGS -lm"
			check_function "floor" "-lm"
			libev_CPPFLAGS="$libev_CPPFLAGS -DHAVE_FLOOR""=$HAVE_FUNCTION"
		else
			check_function "floor"
			libev_CPPFLAGS="$libev_CPPFLAGS -DHAVE_FLOOR""=$HAVE_FUNCTION"
		fi
	else
		check_function "floor"
		libev_CPPFLAGS="$libev_CPPFLAGS -DHAVE_FLOOR""=$HAVE_FUNCTION"
	fi
fi

#### ADD LIBTRE FLAGS
## we always use the one we ship (0.8.0)
if test $libtre = "no"; then
	LDFLAGS="$LDFLAGS tre.o"
	BUILD_DEPS="$BUILD_DEPS tre.o"
	libtre_CPPFLAGS=""

	check_function "isascii"
	libtre_CPPFLAGS="$libtre_CPPFLAGS -DHAVE_ISASCII""=$HAVE_FUNCTION"
	check_function "isblank"
	libtre_CPPFLAGS="$libtre_CPPFLAGS -DHAVE_ISABLANK""=$HAVE_FUNCTION"
fi

#### POSTGRESQL CHECK
## POSTGRES CHANGED THE NAME OF A CONFIG FILE PARAMETER, WHEN WE TEST WE NEED TO KNOW WHICH ONE TO USE
printf "checking for PostgreSQL version >= 9.3.0 (parameter rename)..."
# check PostgreSQL version
has_new_sock_directory_parameter_postgres=$(pg_config --version | awk "{split(\$2,a,\".\"); print (a[1] >= 9) && (a[2] >= 3) && (a[3] >= 0)}")
directory_parameter=""
if test "x$has_new_sock_directory_parameter_postgres" = "x1"; then
	has_new_sock_directory_parameter_postgres=yes
	directory_parameter="unix_socket_directories"
else
	has_new_sock_directory_parameter_postgres=no
	directory_parameter="unix_socket_directory"
fi
echo "$has_new_sock_directory_parameter_postgres"

#### CONFIGURE MAKEFILE
sed -e "s/@sock_dir_parameter@/$directory_parameter/g" \
	-e "s/@LDFLAGS@/$LDFLAGS/g" \
	-e "s/@CPPFLAGS@/$CPPFLAGS/g" \
	-e "s/@BUILD_DEPS@/$BUILD_DEPS/g" \
	-e "s/@prefix@/\/usr\/local/g" \
	-e "s/@MANDIR@/$MANDIR/g" \
	-e "s/@libev_CPPFLAGS@/$libev_CPPFLAGS/g" \
	-e "s/@libtre_CPPFLAGS@/$libtre_CPPFLAGS/g" \
	-e "s/@INSTALL_DEPS@/$INSTALL_DEPS/g" \
	-e "s/@make@/$MAKE/g" < Makefile.in > Makefile

#### CONFIGURE MAN PAGE
sed -e "s/@prefix@/\/usr\/local/g" < man/man1/postage.1.in > man/man1/postage.1

echo
echo
echo "   ###############################################################"
echo "   #                                                             #"
echo "   #                                                             #"
echo "   #                                                             #"
echo "   #               Thank you for choosing postage!               #"
echo "   #                                                             #"
echo "   #         If you have any trouble installing postage,         #"
echo "   #     don't hesitate to email nunzio@workflowproducts.com     #"
echo "   #                  or call 817-503-9545 CST                   #"
echo "   #                      for free support                       #"
echo "   #                                                             #"
echo "   #                                                             #"
echo "   #                                                             #"
echo "   ###############################################################"

if test $libressl != "yes"; then
	libressl_warn
fi
