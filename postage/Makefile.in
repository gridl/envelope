BINARY = postage
CONFIGS = -c config/postage.conf -d config/postage-connections.conf -n true -t 300
WEBROOTS = -r ./web_root
INSTALL_DEPS = @prefix@/sbin/ @prefix@/etc/$(BINARY)/ @prefix@/etc/postage/postage.conf @prefix@/etc/postage/postage-connections.conf
SOCK_DIR_PARAMETER = @sock_dir_parameter@

VERSION = \"$(shell cat ../VERSION)\"
CC = cc
CFLAGS = -O3 -g \
	-fno-strict-aliasing
LDFLAGS = @LDFLAGS@
CPPFLAGS = @CPPFLAGS@ \
	-I../db_framework_pq -I../ -I../common -I../dependencies/tre/include -I../dependencies/libev \
	-DVERSION=$(VERSION) -DPOSTAGE_PREFIX=\"@prefix@\" -DPOSTAGE_INTERFACE_LIBPQ
V=0

common_SOURCES = $(wildcard ../common/*.c) $(filter-out ../util/util_getopt.c, $(filter-out ../util/util_strptime.c, $(filter-out ../util/util_exec.c, $(wildcard ../util/*.c))))
db_framework_pq_SOURCES = $(wildcard ../db_framework_pq/*.c)

postage_SOURCES = $(sort $(common_SOURCES) $(db_framework_pq_SOURCES) $(wildcard *.c))
postage_OBJECTS = $(postage_SOURCES:.c=.o)

libev_SOURCES = ../dependencies/libev/ev.c
libev_OBJECTS = $(libev_SOURCES:.c=.o)

.PHONY: all all-format destroy check

# this needs to be at the top to be the default target
all: $(BINARY)
	@echo
	@echo "Compilation Successful"

#### DEPENDENCIES
$(libev_OBJECTS): %.o: %.c
ifeq ($(V), 1)
	$(CC) $(CFLAGS) $(CPPFLAGS) @libev_CPPFLAGS@ $< -c -o $@
else
	@echo " CC $@"
	@$(CC) $(CFLAGS) $(CPPFLAGS) @libev_CPPFLAGS@ $< -c -o $@
endif

#### BUILDING
$(BINARY): $(libev_OBJECTS) $(postage_OBJECTS)
ifeq ($(V), 1)
	$(CC) $(libev_OBJECTS) $(postage_OBJECTS) $(LDFLAGS) $(CFLAGS) -o ./$(BINARY)
else
	@echo " CCLD $(BINARY)"
	@$(CC) $(libev_OBJECTS) $(postage_OBJECTS) $(LDFLAGS) $(CFLAGS) -o ./$(BINARY)
endif

all-format:
	cd ..; ./cleanup_format.sh; cd $(BINARY)
	$(MAKE) all

$(postage_OBJECTS): %.o: %.c
ifeq ($(V), 1)
	$(CC) $(CFLAGS) $(CPPFLAGS) -Wall -Wextra -Wconversion $< -c -o $@
else
	@echo " CC $@"
	@$(CC) $(CFLAGS) $(CPPFLAGS) -Wall -Wextra -Wconversion $< -c -o $@
endif

#### CLEAN
clean:
	rm -f $(postage_OBJECTS) $(libev_OBJECTS) ../check/*.o $(BINARY)
	@echo
	@echo "Clean Successful"

#### INSTALL
@prefix@/sbin/:
	mkdir -p @prefix@/sbin/

@prefix@/etc/$(BINARY)/:
	mkdir -p @prefix@/etc/$(BINARY)/

@prefix@/etc/$(BINARY)/$(BINARY).conf: @prefix@/etc/$(BINARY)/ config/$(BINARY).conf
	test -f @prefix@/etc/$(BINARY)/$(BINARY).conf || install config/$(BINARY).conf @prefix@/etc/$(BINARY)/$(BINARY).conf;

@prefix@/etc/$(BINARY)/$(BINARY)-connections.conf: @prefix@/etc/$(BINARY)/ config/$(BINARY)-connections.conf
	test -f @prefix@/etc/$(BINARY)/$(BINARY)-connections.conf || install config/$(BINARY)-connections.conf @prefix@/etc/$(BINARY)/$(BINARY)-connections.conf;

install: $(INSTALL_DEPS)
	mkdir -p @prefix@/etc/$(BINARY)/web_root/$(BINARY)
	cp -rf ./web_root/$(BINARY)/* @prefix@/etc/$(BINARY)/web_root/$(BINARY)/
	install config/$(BINARY).conf @prefix@/etc/$(BINARY)/$(BINARY).conf.example
	install config/$(BINARY)-connections.conf @prefix@/etc/$(BINARY)/$(BINARY)-connections.conf.example
	install $(BINARY) @prefix@/sbin/
	install man/man1/postage.1 @prefix@/@MANDIR@/man1/postage.1
	@echo
	@echo "Installation Successful"

uninstall:
	rm @prefix@/sbin/$(BINARY)
	rm -rf @prefix@/etc/$(BINARY)/web_root/
	rm -rf @prefix@/etc/$(BINARY)/*.example
	@echo
	@echo "Uninstall Successful"

destroy:
	rm @prefix@/sbin/$(BINARY)
	rm -rf @prefix@/etc/$(BINARY)
	@echo
	@echo "Destroy Successful"
	@echo "NOTE: Even though all configuration files have been destroyed, your sql files have been preserved. They should be in you home folder under .postage"


#### TESTING
check_SOURCES = $(filter-out ../util/util_getopt.c, $(filter-out ../util/util_strptime.c, $(filter-out ../util/util_exec.c, $(wildcard ../util/*.c)))) $(db_framework_pq_SOURCES) $(wildcard ../check/*.c)
check_OBJECTS = $(check_SOURCES:.c=.o)

check: $(check_OBJECTS)
	$(CC) $(check_OBJECTS) $(LDFLAGS) $(CFLAGS) -o ./check
	./check

check-valgrind: $(check_OBJECTS)
	$(CC) $(check_OBJECTS) $(LDFLAGS) $(CFLAGS) -o ./check
	valgrind --leak-check=full --track-fds=yes --track-origins=yes --show-reachable=yes --suppressions=../valgrind/mac_suppressions.txt --num-callers=100 ./check

test-common:
	-kill `cat postgres.pid`
	-rm postgres.pid
	-rm -rf data_test
	initdb -D data_test -E UTF8 -U postgres
	echo $(SOCK_DIR_PARAMETER)"='/tmp'" >> data_test/postgresql.conf
	{ postgres -D data_test -p 5431 2> output.txt > output.txt & }; \
	echo $$! > postgres.pid; \
	sleep 3
	psql -U postgres -h 127.0.0.1 -p 5431 postgres -f test.sql
	kill `cat postgres.pid`; rm postgres.pid; sleep 3
	cp data_test/pg_hba.conf data_test/pg_hba.bak
	sed -e '/trust/s/32            trust/32            md5/g' < data_test/pg_hba.bak > data_test/pg_hba.conf
	echo "host    all             all             192.168.0.0/16            md5" >> data_test/pg_hba.conf
	{ postgres -D data_test -i -p 5431 2> output.txt > output.txt & }; \
	echo $$! > postgres.pid; \
	sleep 3

test: test-common
	./$(BINARY) $(CONFIGS) $(WEBROOTS) -l info || \
	{ kill `cat postgres.pid`; rm postgres.pid; rm -rf data_test; exit 1; }

test-ssl: test-common
	./$(BINARY) $(CONFIGS) $(WEBROOTS) -j ../ssl/self.crt -k ../ssl/self.key -l info || \
	{ kill `cat postgres.pid`; rm postgres.pid; rm -rf data_test; exit 1; }

gdb: test-common
	echo "run" > temp_gdb_commands
	gdb -x temp_gdb_commands --args ./$(BINARY) $(CONFIGS) $(WEBROOTS) -l info || \
	{ kill `cat postgres.pid`; rm postgres.pid; rm -rf data_test; exit 1; }
	rm temp_gdb_commands

gdb-ssl: test-common
	echo "run" > temp_gdb_commands
	gdb -x temp_gdb_commands --args ./$(BINARY) $(CONFIGS) $(WEBROOTS) -j ../ssl/self.crt -k ../ssl/self.key -l info || \
	{ kill `cat postgres.pid`; rm postgres.pid; rm -rf data_test; exit 1; }
	rm temp_gdb_commands

lldb: test-common
	echo "run" > temp_lldb_commands
	lldb -s temp_lldb_commands -- ./$(BINARY) $(CONFIGS) $(WEBROOTS) -l info || \
	{ kill `cat postgres.pid`; rm postgres.pid; rm -rf data_test; exit 1; }
	rm temp_lldb_commands

lldb-ssl: test-common
	echo "run" > temp_lldb_commands
	lldb -s temp_lldb_commands -- ./$(BINARY) $(CONFIGS) $(WEBROOTS) -j ../ssl/self.crt -k ../ssl/self.key -l info || \
	{ kill `cat postgres.pid`; rm postgres.pid; rm -rf data_test; exit 1; }
	rm temp_lldb_commands

valgrind: test-common
	valgrind --leak-check=full --track-fds=yes --track-origins=yes --show-reachable=yes --suppressions=../valgrind/mac_suppressions.txt --num-callers=100 ./$(BINARY) $(CONFIGS) $(WEBROOTS) -l none || \
	{ kill `cat postgres.pid`; rm postgres.pid; rm -rf data_test; exit 1; }

valgrind-ssl: test-common
	valgrind --leak-check=full --track-fds=yes --track-origins=yes --show-reachable=yes --suppressions=../valgrind/mac_suppressions.txt --num-callers=100 ./$(BINARY) $(CONFIGS) $(WEBROOTS) -j ../ssl/self.crt -k ../ssl/self.key -l none || \
	{ kill `cat postgres.pid`; rm postgres.pid; rm -rf data_test; exit 1; }
